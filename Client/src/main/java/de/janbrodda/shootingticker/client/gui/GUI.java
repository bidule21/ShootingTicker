package de.janbrodda.shootingticker.client.gui;

import com.alee.laf.WebLookAndFeel;
import com.alee.laf.combobox.WebComboBoxCellRenderer;
import com.alee.laf.combobox.WebComboBoxElement;
import com.alee.laf.combobox.WebComboBoxUI;
import de.janbrodda.shootingticker.client.app.App;
import de.janbrodda.shootingticker.client.app.FolderData;
import de.janbrodda.shootingticker.client.data.Competition;
import de.janbrodda.shootingticker.client.settings.Settings;
import de.janbrodda.shootingticker.client.settings.SettingsValidator;
import de.janbrodda.shootingticker.client.settings.ValidationResult;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author jan
 */
public class GUI extends javax.swing.JFrame {

	private final App app = App.get();
	JPanel loadingPanel = new JPanel();
	JProgressBar loadingPanelProgress = new JProgressBar();
	final Component frame = this;
	SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy HH:mm:ss");

	/**
	 * Creates new form GUI
	 */
	public GUI() {
		initComponents();

		loadingPanel.setBackground(new Color(200, 200, 200));
		loadingPanelProgress.setIndeterminate(true);
		loadingPanel.add(loadingPanelProgress);
		loadingPanel.setPreferredSize(this.getSize());
		loadingPanel.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
			}
		});

		// main form adjustments
		this.setResizable(false);
		this.setLocationRelativeTo(null);

		numShotsField.setEditable(false);
		timeField.setEditable(false);
	}

	public void showPopup(String message) {
		JOptionPane.showMessageDialog(this, message, "", JOptionPane.INFORMATION_MESSAGE);
	}

	public void executeInBackground(final Runnable runnable) {
		mainContent.add(loadingPanel, 0);
		mainContent.moveToFront(loadingPanel);
		mainContent.moveToBack(jTabbedPane1);

		new Thread() {
			@Override
			public void run() {
				runnable.run();
				mainContent.remove(loadingPanel);
				frame.repaint();
			}
		}.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainContent = new javax.swing.JLayeredPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        uploadPanel = new javax.swing.JPanel();
        remoteCompetitionDropdown = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        timeField = new javax.swing.JTextField();
        timePlusOneButton = new javax.swing.JButton();
        timePlusTenButton = new javax.swing.JButton();
        timeMinusOneButton = new javax.swing.JButton();
        timeMinusTenButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        localCompetitionDropdown = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        numShotsField = new javax.swing.JTextField();
        shotsPlusTenButton = new javax.swing.JButton();
        shotsMinusTenButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        labelSelectedCompetitionLastChange = new javax.swing.JLabel();
        competitionsPanel = new javax.swing.JPanel();
        competitionsPanelData = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        newCompetitionDateDayField = new javax.swing.JTextField();
        newCompetitionNameField = new javax.swing.JTextField();
        newCompetitionDateMonthField = new javax.swing.JTextField();
        newCompetitionDateYearField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        createCompetitionButton = new javax.swing.JButton();
        newCompetitionDateDayField1 = new javax.swing.JTextField();
        newCompetitionDateMonthField1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        settingsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        competitionBasePath = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        proxyHost = new javax.swing.JTextField();
        proxyUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        apiKey = new javax.swing.JTextField();
        apiUrl = new javax.swing.JTextField();
        btnChangeExportFolder = new javax.swing.JButton();
        btnSaveSettings = new javax.swing.JButton();
        proxyPass = new javax.swing.JPasswordField();
        proxyPort = new javax.swing.JTextField();
        useProxy = new javax.swing.JCheckBox();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        mainContent.setLayout(new java.awt.BorderLayout());

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jLabel2.setText("Verbleibende Zeit (Minuten):");

        timeField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        timeField.setText("0");
        timeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeFieldActionPerformed(evt);
            }
        });

        timePlusOneButton.setText("+1");
        timePlusOneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timePlusOneButtonActionPerformed(evt);
            }
        });

        timePlusTenButton.setText("+10");
        timePlusTenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timePlusTenButtonActionPerformed(evt);
            }
        });

        timeMinusOneButton.setText("-1");
        timeMinusOneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeMinusOneButtonActionPerformed(evt);
            }
        });

        timeMinusTenButton.setText("-10");
        timeMinusTenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeMinusTenButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel11.setText("Lokaler Wettkampf");

        jLabel12.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel12.setText("Server-Wettkampf");

        localCompetitionDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                localCompetitionDropdownItemStateChanged(evt);
            }
        });

        jLabel13.setText("Anzahl Schüsse:");

        numShotsField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        numShotsField.setText("0");

        shotsPlusTenButton.setText("+10");
        shotsPlusTenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shotsPlusTenButtonActionPerformed(evt);
            }
        });

        shotsMinusTenButton.setText("-10");
        shotsMinusTenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shotsMinusTenButtonActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel14.setText("Ausgewählter Wettkampf:");

        jLabel15.setText("Letzte Änderung:");

        labelSelectedCompetitionLastChange.setText("                                                             ");

        javax.swing.GroupLayout uploadPanelLayout = new javax.swing.GroupLayout(uploadPanel);
        uploadPanel.setLayout(uploadPanelLayout);
        uploadPanelLayout.setHorizontalGroup(
            uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uploadPanelLayout.createSequentialGroup()
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(localCompetitionDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(remoteCompetitionDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(uploadPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numShotsField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(uploadPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadPanelLayout.createSequentialGroup()
                                .addComponent(timePlusTenButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeMinusTenButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, uploadPanelLayout.createSequentialGroup()
                                .addComponent(shotsPlusTenButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(shotsMinusTenButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timePlusOneButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeMinusOneButton))
                    .addGroup(uploadPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelSelectedCompetitionLastChange)
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );
        uploadPanelLayout.setVerticalGroup(
            uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(localCompetitionDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(remoteCompetitionDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(uploadPanelLayout.createSequentialGroup()
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(timeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(numShotsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(uploadPanelLayout.createSequentialGroup()
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timePlusTenButton)
                            .addComponent(timeMinusTenButton)
                            .addComponent(timePlusOneButton)
                            .addComponent(timeMinusOneButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(shotsPlusTenButton)
                            .addComponent(shotsMinusTenButton))
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(uploadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(labelSelectedCompetitionLastChange))
                .addGap(94, 94, 94))
        );

        jTabbedPane1.addTab("Hochladen", uploadPanel);

        competitionsPanelData.setLayout(new java.awt.BorderLayout());

        jLabel16.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel16.setText("Neuen Wettkampf anlegen");

        jLabel17.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel17.setText("Datum:");

        jLabel18.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel18.setText("Name:");

        newCompetitionDateDayField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        newCompetitionDateMonthField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        newCompetitionDateYearField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel19.setText(":");

        createCompetitionButton.setText("<html><center>Wettkampf erstellen</center></html>");
        createCompetitionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createCompetitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCompetitionButtonActionPerformed(evt);
            }
        });

        newCompetitionDateDayField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        newCompetitionDateMonthField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel20.setText("Tag/Monat/Jahr     Stunde/Minute");

        javax.swing.GroupLayout competitionsPanelLayout = new javax.swing.GroupLayout(competitionsPanel);
        competitionsPanel.setLayout(competitionsPanelLayout);
        competitionsPanelLayout.setHorizontalGroup(
            competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(competitionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(competitionsPanelData, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
                    .addGroup(competitionsPanelLayout.createSequentialGroup()
                        .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addGroup(competitionsPanelLayout.createSequentialGroup()
                                .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(competitionsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addGap(18, 18, 18)
                                        .addComponent(newCompetitionNameField))
                                    .addGroup(competitionsPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel20)
                                            .addGroup(competitionsPanelLayout.createSequentialGroup()
                                                .addComponent(newCompetitionDateDayField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(newCompetitionDateMonthField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(newCompetitionDateYearField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(newCompetitionDateDayField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel19)
                                                .addGap(4, 4, 4)
                                                .addComponent(newCompetitionDateMonthField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(createCompetitionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        competitionsPanelLayout.setVerticalGroup(
            competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(competitionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(competitionsPanelData, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(competitionsPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(newCompetitionNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(competitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(newCompetitionDateDayField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newCompetitionDateMonthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newCompetitionDateYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newCompetitionDateDayField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(newCompetitionDateMonthField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19)))
                    .addGroup(competitionsPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(createCompetitionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Wettkämpfe verwalten", competitionsPanel);

        jLabel1.setText("Export-Ordner:");

        competitionBasePath.setEnabled(false);

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Wettkampf");

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel4.setText("Proxy");

        jLabel5.setText("Hostname:");

        jLabel6.setText("Benutzername:");

        jLabel7.setText("Passwort:");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Server");

        jLabel9.setText("Adresse:");

        jLabel10.setText("API-Secret:");

        btnChangeExportFolder.setText("Ändern");
        btnChangeExportFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeExportFolderActionPerformed(evt);
            }
        });

        btnSaveSettings.setText("Speichern");
        btnSaveSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveSettingsActionPerformed(evt);
            }
        });

        useProxy.setText("Proxy benutzen?");
        useProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useProxyActionPerformed(evt);
            }
        });

        statusLabel.setText("                                  ");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel8))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(btnSaveSettings)
                .addGap(25, 25, 25)
                .addComponent(statusLabel))
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel1))
                        .addGap(23, 23, 23)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(competitionBasePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnChangeExportFolder)
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                                .addComponent(apiUrl)
                                .addContainerGap())))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(54, 54, 54)
                                .addComponent(apiKey))
                            .addGroup(settingsPanelLayout.createSequentialGroup()
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel4))
                                    .addComponent(jLabel6))
                                .addGap(24, 24, 24)
                                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(proxyUser)
                                    .addComponent(proxyPass)
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addComponent(proxyHost)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(proxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(settingsPanelLayout.createSequentialGroup()
                                        .addComponent(useProxy)
                                        .addGap(0, 319, Short.MAX_VALUE)))))
                        .addContainerGap())))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(competitionBasePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addComponent(btnChangeExportFolder))
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(useProxy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(proxyHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(proxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(6, 6, 6)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proxyUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(6, 6, 6)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(proxyPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel8)
                .addGap(6, 6, 6)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apiUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(6, 6, 6)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apiKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(13, 13, 13)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusLabel)
                    .addComponent(btnSaveSettings))
                .addGap(5, 5, 5))
        );

        jTabbedPane1.addTab("Einstellungen", settingsPanel);

        mainContent.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void panelChangedToCompetitions() {
		competitionsPanelData.removeAll();

		executeInBackground(new Runnable() {
			@Override
			public void run() {
				try {
					final String[] columnNames = {"#", "Name", "Date", ""};

					final List<Competition> competitions = app.getRemoteCompetitions();
					List<Object[]> tableData = new ArrayList<>();

					for (Competition competition : competitions) {
						Object[] rowData = new Object[columnNames.length];
						rowData[0] = competition.id;
						rowData[1] = competition.name;
						//TODO add date to data model
						rowData[2] = competition.timestamp;

						rowData[columnNames.length - 1] = "Delete";
						tableData.add(rowData);
					}

					Object[][] data = new Object[tableData.size()][];
					for (int i = 0; i < tableData.size(); i++) {
						data[i] = tableData.get(i);
					}

					// anonymous class overwrite is necessary for cell editing
					DefaultTableModel model = new DefaultTableModel(data, columnNames);
					JTable table = new JTable(model) {
						@Override
						public boolean isCellEditable(int row, int column) {
							// returns true for last column, this should be the button
							return column == columnNames.length - 1;
						}

					};
					table.setModel(model);

					// action for delete button press
					Action delete = new AbstractAction() {
						@Override
						public void actionPerformed(ActionEvent e) {
							JTable table = (JTable) e.getSource();
							int modelRow = Integer.valueOf(e.getActionCommand());
							Competition competition = competitions.get(modelRow);

							boolean deleteConfirmed
									= JOptionPane.showConfirmDialog(frame,
											"Wettkampf <" + competition.name + "> löschen?",
											"",
											JOptionPane.YES_NO_OPTION)
									== JOptionPane.YES_OPTION;

							if (deleteConfirmed) {
								try {
									app.deleteCompetition(competition);
									((DefaultTableModel) table.getModel()).removeRow(modelRow);
									competitions.remove(modelRow);
								} catch (IOException ex) {
									Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
									showPopup("Can't delete Competition from Server");
								}
							}
						}
					};

					ButtonColumn buttonColumn = new ButtonColumn(table, delete, columnNames.length - 1);
					buttonColumn.setMnemonic(KeyEvent.VK_D);

					JScrollPane container = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
					competitionsPanelData.add(container);
				} catch (IOException ex) {
					showPopup("Can't load Competitions from Server");
					Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		});

	}

	private void panelChangedToSettings() {
		Settings s = Settings.get();
		apiUrl.setText(s.apiUrl);
		apiKey.setText(s.apiKey);
		proxyHost.setText(s.proxyHost);
		proxyUser.setText(s.proxyUser);
		proxyPass.setText(s.proxyPass);
		proxyPort.setText(s.proxyPort + "");
		competitionBasePath.setText(s.competitionBasePath);
		competitionBasePath.setToolTipText(s.competitionBasePath);
		useProxy.setSelected(s.useProxy);
		useProxyActionPerformed(null);
	}

	private void panelChangedToUpload() {
		executeInBackground(new Runnable() {
			@Override
			public void run() {
				try {
					remoteCompetitionDropdown.removeAllItems();
					for (Competition competition : app.getRemoteCompetitions()) {
						remoteCompetitionDropdown.addItem(new ComboboxItem<>(competition.name, competition));
					}
				} catch (IOException ex) {
					showPopup("Can't load Competitions from Server");
					Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
				}

				try {
					List<FolderData> localFolders = app.getAvailableFolders();
					localCompetitionDropdown.removeAllItems();

					for (FolderData localFolder : localFolders) {
						ComboboxItem<File> item = new ComboboxItem<>(localFolder.name, localFolder.file);
						localCompetitionDropdown.addItem(item);
					}
				} catch (NullPointerException e) {
					showPopup("Can't load Competitions from Disk");
				}
			}
		});
	}

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
		loadingPanel.setPreferredSize(this.getSize());
    }//GEN-LAST:event_formComponentResized

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
		JPanel active = (JPanel) jTabbedPane1.getSelectedComponent();
		if (active.equals(settingsPanel)) {
			panelChangedToSettings();
		} else if (active.equals(uploadPanel)) {
			panelChangedToUpload();
		} else if (active.equals(competitionsPanel)) {
			panelChangedToCompetitions();
		}
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void useProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useProxyActionPerformed
		boolean checked = useProxy.isSelected();
		proxyHost.setEnabled(checked);
		proxyPort.setEnabled(checked);
		proxyUser.setEnabled(checked);
		proxyPass.setEnabled(checked);
    }//GEN-LAST:event_useProxyActionPerformed

    private void btnSaveSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveSettingsActionPerformed
		Settings s = Settings.get();
		s.competitionBasePath = competitionBasePath.getText();
		s.apiUrl = apiUrl.getText();
		s.apiKey = apiKey.getText();
		s.proxyHost = proxyHost.getText();
		if (StringUtils.isNumeric(proxyPort.getText())) {
			s.proxyPort = Integer.parseInt(proxyPort.getText());
		}
		s.proxyPass = new String(proxyPass.getPassword());
		s.proxyUser = proxyUser.getText();
		s.useProxy = useProxy.isSelected();

		ValidationResult validationResult = SettingsValidator.validate(s);
		if (!validationResult.isValid) {
			JOptionPane.showMessageDialog(this, validationResult.message);
		} else {
			s.save();

			statusLabel.setText("Einstellungen gespeichert!");

			new Thread() {
				@Override
				public void run() {
					try {
						Thread.sleep(3000);
					} catch (InterruptedException ex) {
						Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
					}

					SwingUtilities.invokeLater(new Runnable() {
						@Override
						public void run() {
							statusLabel.setText("");
						}
					});
				}
			}.start();
		}
    }//GEN-LAST:event_btnSaveSettingsActionPerformed

    private void btnChangeExportFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeExportFolderActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_btnChangeExportFolderActionPerformed

    private void shotsPlusTenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shotsPlusTenButtonActionPerformed
		int value = Integer.parseInt(numShotsField.getText());
		numShotsField.setText((value + 10) + "");
    }//GEN-LAST:event_shotsPlusTenButtonActionPerformed

    private void timeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeFieldActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_timeFieldActionPerformed

    private void localCompetitionDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_localCompetitionDropdownItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			ComboboxItem<File> item = (ComboboxItem<File>) evt.getItem();
			if (item != null) {
				File selectedFolder = item.value;
				String lastModificationDate = dateFormat.format(selectedFolder.lastModified());
				labelSelectedCompetitionLastChange.setText(lastModificationDate);
			}
		}
    }//GEN-LAST:event_localCompetitionDropdownItemStateChanged

    private void shotsMinusTenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shotsMinusTenButtonActionPerformed
		int value = Integer.parseInt(numShotsField.getText());
		numShotsField.setText((value - 10) + "");
    }//GEN-LAST:event_shotsMinusTenButtonActionPerformed

    private void timePlusTenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timePlusTenButtonActionPerformed
		int value = Integer.parseInt(timeField.getText());
		timeField.setText((value + 10) + "");
    }//GEN-LAST:event_timePlusTenButtonActionPerformed

    private void timeMinusTenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeMinusTenButtonActionPerformed
		int value = Integer.parseInt(timeField.getText());
		timeField.setText((value - 10) + "");
     }//GEN-LAST:event_timeMinusTenButtonActionPerformed

    private void timePlusOneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timePlusOneButtonActionPerformed
		int value = Integer.parseInt(timeField.getText());
		timeField.setText((value + 1) + "");
     }//GEN-LAST:event_timePlusOneButtonActionPerformed

    private void timeMinusOneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeMinusOneButtonActionPerformed
		int value = Integer.parseInt(timeField.getText());
		timeField.setText((value - 1) + "");
     }//GEN-LAST:event_timeMinusOneButtonActionPerformed

    private void createCompetitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCompetitionButtonActionPerformed
		int year = Integer.parseInt(newCompetitionDateYearField.getText());
		int month = Integer.parseInt(newCompetitionDateMonthField.getText());
		int day = Integer.parseInt(newCompetitionDateDayField.getText());
		Calendar calendar = Calendar.getInstance();
		calendar.set(year, month - 1, day, 0, 0, 0);
		Date date = calendar.getTime();

		final Competition competition = new Competition();
		competition.name = newCompetitionNameField.getText();
		competition.date = date;
		competition.numShots = 0;

		executeInBackground(new Runnable() {
			@Override
			public void run() {
				try {
					app.saveCompetition(competition);
					panelChangedToCompetitions();
				} catch (IOException ex) {
					Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
					showPopup("Can't send Competition to Server");
				}
			}
		});
    }//GEN-LAST:event_createCompetitionButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set custom look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		/*try {
		 for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
		 if ("Nimbus".equals(info.getName())) {
		 UIManager.setLookAndFeel(info.getClassName());
		 break;
		 }
		 }
		 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
		 // If Nimbus is not available, you can set the GUI to another look and feel.
		 }*/

		/*try {
		 UIManager.setLookAndFeel("com.seaglasslookandfeel.SeaGlassLookAndFeel");
		 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
		 }*/
		WebLookAndFeel.install();

		//</editor-fold>
        /* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField apiKey;
    private javax.swing.JTextField apiUrl;
    private javax.swing.JButton btnChangeExportFolder;
    private javax.swing.JButton btnSaveSettings;
    private javax.swing.JTextField competitionBasePath;
    private javax.swing.JPanel competitionsPanel;
    private javax.swing.JPanel competitionsPanelData;
    private javax.swing.JButton createCompetitionButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelSelectedCompetitionLastChange;
    private javax.swing.JComboBox localCompetitionDropdown;
    private javax.swing.JLayeredPane mainContent;
    private javax.swing.JTextField newCompetitionDateDayField;
    private javax.swing.JTextField newCompetitionDateDayField1;
    private javax.swing.JTextField newCompetitionDateMonthField;
    private javax.swing.JTextField newCompetitionDateMonthField1;
    private javax.swing.JTextField newCompetitionDateYearField;
    private javax.swing.JTextField newCompetitionNameField;
    private javax.swing.JTextField numShotsField;
    private javax.swing.JTextField proxyHost;
    private javax.swing.JPasswordField proxyPass;
    private javax.swing.JTextField proxyPort;
    private javax.swing.JTextField proxyUser;
    private javax.swing.JComboBox remoteCompetitionDropdown;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JButton shotsMinusTenButton;
    private javax.swing.JButton shotsPlusTenButton;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField timeField;
    private javax.swing.JButton timeMinusOneButton;
    private javax.swing.JButton timeMinusTenButton;
    private javax.swing.JButton timePlusOneButton;
    private javax.swing.JButton timePlusTenButton;
    private javax.swing.JPanel uploadPanel;
    private javax.swing.JCheckBox useProxy;
    // End of variables declaration//GEN-END:variables
}
